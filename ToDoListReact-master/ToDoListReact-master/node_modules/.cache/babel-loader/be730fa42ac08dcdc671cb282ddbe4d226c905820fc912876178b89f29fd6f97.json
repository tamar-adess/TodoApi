{"ast":null,"code":"// import axios from 'axios';\n\n//  const apiUrl = \"http://localhost:5224\";  // אם אתה לא רוצה להשתמש ב-HTTPS\n\n// export default {\n//   getTasks: async () => {\n//     const result = await axios.get(`${apiUrl}/items`)    \n//     return result.data;\n//   },\n\n//   addTask: async (name) => {\n//     try {\n//         const result = await axios.post(`${apiUrl}/items`, {\n//             name: name,\n//             isComplete: false  // הוספת מצב ברירת מחדל (לא הושלם)\n//         });\n//         console.log('Task added successfully', result.data);\n//     } catch (error) {\n//         console.error('Error adding task:', error);\n//     }\n// }\n\n// ,deleteTask: async (id) => {\n//   try {\n//     await axios.delete(`${apiUrl}/items/${id}`);\n//     return id; // מחזיר את ה-ID למחיקה בצד הלקוח\n//   } catch (error) {\n//     console.error(\"Error deleting task:\", error);\n//   }\n// }\n// ,\n// // updateTask: async (id, updatedTask) => {\n// //   try {\n// //     if (!updatedTask.name) {\n// //       console.error(\"Error: Name is missing!\");\n// //       return;\n// //     }\n\n// //     console.log(\"Sending update request:\", { id, updatedTask });\n\n// //     const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask);\n// //     console.log(\"Task updated successfully:\", result.data);\n// //     return result.data;\n// //   } catch (error) {\n// //     console.error(\"Error updating task:\", error.response ? error.response.data : error.message);\n// //   }\n// // }\n\n// // ,\n// // setCompleted: async (id, isComplete) => {\n// //   try {\n// //       const result = await axios.put(`${apiUrl}/items/${id}`, {\n// //           isComplete: isComplete\n// //       });\n// //       console.log('Task updated successfully', result.data);\n// //   } catch (error) {\n// //       console.error('Error updating task:', error);\n// //   }\n// // }\n// updateTask: async (id, updatedTask) => {\n//   try {\n//     console.log(\"🔵 שליחת בקשת עדכון\", { id, updatedTask });\n\n//     const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask);\n\n//     console.log(\"✅ המשימה עודכנה בהצלחה:\", result.data);\n//     return result.data;\n//   } catch (error) {\n//     console.error(\"❌ שגיאה בעדכון המשימה:\", error.response ? error.response.data : error.message);\n//   }\n// },\n// setCompleted: async (id, isComplete, name) => {\n//   try {\n//     console.log(\"🔵 שולח עדכון לשרת:\", { id, name, isComplete });\n\n//     const result = await axios.put(`${apiUrl}/items/${id}`, { \n//       name: name, \n//       isComplete: isComplete \n//     });\n\n//     console.log(\"✅ עדכון הצליח:\", result.data);\n//   } catch (error) {\n//     console.error(\"❌ שגיאה בעדכון הסטטוס:\", error.response ? error.response.data : error.message);\n//   }\n// }\n\n// };\nimport axios from 'axios';\nconst apiUrl = \"http://localhost:5224\"; // אם אתה לא רוצה להשתמש ב-HTTPS\n\nexport default {\n  getTasks: async () => {\n    const result = await axios.get(`${apiUrl}/items`);\n    return result.data;\n  },\n  addTask: async name => {\n    try {\n      const result = await axios.post(`${apiUrl}/items`, {\n        name: name,\n        isComplete: false // הוספת מצב ברירת מחדל (לא הושלם)\n      });\n      console.log('Task added successfully', result.data);\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  },\n  deleteTask: async id => {\n    try {\n      await axios.delete(`${apiUrl}/items/${id}`);\n      return id; // מחזיר את ה-ID למחיקה בצד הלקוח\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  },\n  updateTask: async (id, name, isComplete) => {\n    try {\n      const updatedTask = {\n        Name: name,\n        IsComplete: isComplete\n      };\n\n      // שולח את הנתונים לשרת\n      const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask, {\n        headers: {\n          'Content-Type': 'application/json' // חשוב שה-Content-Type יהיה json\n        }\n      });\n      console.log('Task updated successfully:', result.data);\n      return result.data;\n    } catch (error) {\n      // טיפול בשגיאות כולל הצגת פרטי השגיאה\n      console.error('Error updating task:', error);\n      if (error.response) {\n        // אם יש תשובת שגיאה מהשרת (למשל 500)\n        console.error('Error response:', error.response.data);\n        console.error('Error status:', error.response.status);\n      } else if (error.request) {\n        // אם לא התקבלה תשובה מהשרת\n        console.error('No response received:', error.request);\n      } else {\n        // אם הייתה בעיה כלשהי בהגדרת הבקשה\n        console.error('Error message:', error.message);\n      }\n\n      // זורק את השגיאה כדי שניתן יהיה לתפוס אותה בצד הלקוח\n      throw error;\n    }\n  },\n  setCompleted: async (id, name, isComplete) => {\n    try {\n      // שולח רק את השדה 'isComplete' ב-JSON\n      const result = await axios.put(`${apiUrl}/items/${id}`, {\n        Name: name,\n        // אם לא מעדכנים את ה-Name, שלח ערך ריק\n        IsComplete: isComplete // עדכון של השדה IsComplete בלבד\n      }, {\n        headers: {\n          'Content-Type': 'application/json' // חשוב שה-Content-Type יהיה json\n        }\n      });\n      console.log('Task updated successfully:', result.data);\n    } catch (error) {\n      console.error('Error updating task:', error);\n      if (error.response) {\n        console.error('Error response:', error.response.data);\n        console.error('Error status:', error.response.status);\n      } else if (error.request) {\n        console.error('No response received:', error.request);\n      } else {\n        console.error('Error message:', error.message);\n      }\n    }\n  }\n\n  // setCompleted: async (id, isComplete, name) => {\n  //   try {\n  //       const result = await axios.put(`${apiUrl}/items/${id}`, {\n  //           name: name,  \n  //           isComplete: isComplete\n  //       });\n  //       console.log('Task updated successfully', result.data);\n  //   } catch (error) {\n  //       console.error('Error updating task:', error.response ? error.response.data : error.message);\n  //   }\n  // }\n};","map":{"version":3,"names":["axios","apiUrl","getTasks","result","get","data","addTask","name","post","isComplete","console","log","error","deleteTask","id","delete","updateTask","updatedTask","Name","IsComplete","put","headers","response","status","request","message","setCompleted"],"sources":["C:/Users/This User/Desktop/הנדסאים/שנה ב/פרקטיקוד/פרויקט 3/TodoApi/ToDoListReact-master/ToDoListReact-master/src/service.js"],"sourcesContent":["// import axios from 'axios';\n\n//  const apiUrl = \"http://localhost:5224\";  // אם אתה לא רוצה להשתמש ב-HTTPS\n\n// export default {\n//   getTasks: async () => {\n//     const result = await axios.get(`${apiUrl}/items`)    \n//     return result.data;\n//   },\n\n//   addTask: async (name) => {\n//     try {\n//         const result = await axios.post(`${apiUrl}/items`, {\n//             name: name,\n//             isComplete: false  // הוספת מצב ברירת מחדל (לא הושלם)\n//         });\n//         console.log('Task added successfully', result.data);\n//     } catch (error) {\n//         console.error('Error adding task:', error);\n//     }\n// }\n\n    \n// ,deleteTask: async (id) => {\n//   try {\n//     await axios.delete(`${apiUrl}/items/${id}`);\n//     return id; // מחזיר את ה-ID למחיקה בצד הלקוח\n//   } catch (error) {\n//     console.error(\"Error deleting task:\", error);\n//   }\n// }\n// ,\n// // updateTask: async (id, updatedTask) => {\n// //   try {\n// //     if (!updatedTask.name) {\n// //       console.error(\"Error: Name is missing!\");\n// //       return;\n// //     }\n\n// //     console.log(\"Sending update request:\", { id, updatedTask });\n\n// //     const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask);\n// //     console.log(\"Task updated successfully:\", result.data);\n// //     return result.data;\n// //   } catch (error) {\n// //     console.error(\"Error updating task:\", error.response ? error.response.data : error.message);\n// //   }\n// // }\n\n// // ,\n// // setCompleted: async (id, isComplete) => {\n// //   try {\n// //       const result = await axios.put(`${apiUrl}/items/${id}`, {\n// //           isComplete: isComplete\n// //       });\n// //       console.log('Task updated successfully', result.data);\n// //   } catch (error) {\n// //       console.error('Error updating task:', error);\n// //   }\n// // }\n// updateTask: async (id, updatedTask) => {\n//   try {\n//     console.log(\"🔵 שליחת בקשת עדכון\", { id, updatedTask });\n\n//     const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask);\n\n//     console.log(\"✅ המשימה עודכנה בהצלחה:\", result.data);\n//     return result.data;\n//   } catch (error) {\n//     console.error(\"❌ שגיאה בעדכון המשימה:\", error.response ? error.response.data : error.message);\n//   }\n// },\n// setCompleted: async (id, isComplete, name) => {\n//   try {\n//     console.log(\"🔵 שולח עדכון לשרת:\", { id, name, isComplete });\n\n//     const result = await axios.put(`${apiUrl}/items/${id}`, { \n//       name: name, \n//       isComplete: isComplete \n//     });\n\n//     console.log(\"✅ עדכון הצליח:\", result.data);\n//   } catch (error) {\n//     console.error(\"❌ שגיאה בעדכון הסטטוס:\", error.response ? error.response.data : error.message);\n//   }\n// }\n\n\n\n// };\nimport axios from 'axios';\n\n const apiUrl = \"http://localhost:5224\";  // אם אתה לא רוצה להשתמש ב-HTTPS\n\nexport default {\n  getTasks: async () => {\n    const result = await axios.get(`${apiUrl}/items`)    \n    return result.data;\n  },\n\n  addTask: async (name) => {\n    try {\n        const result = await axios.post(`${apiUrl}/items`, {\n            name: name,\n            isComplete: false  // הוספת מצב ברירת מחדל (לא הושלם)\n        });\n        console.log('Task added successfully', result.data);\n    } catch (error) {\n        console.error('Error adding task:', error);\n    }\n},\n\n    \ndeleteTask: async (id) => {\n  try {\n    await axios.delete(`${apiUrl}/items/${id}`);\n    return id; // מחזיר את ה-ID למחיקה בצד הלקוח\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n  }\n}\n,\n\n\nupdateTask: async (id, name, isComplete) => {\n  try {\n    const updatedTask = {\n      Name: name,  \n      IsComplete: isComplete \n    };\n\n    // שולח את הנתונים לשרת\n    const result = await axios.put(`${apiUrl}/items/${id}`, updatedTask, {\n      headers: {\n        'Content-Type': 'application/json'  // חשוב שה-Content-Type יהיה json\n      }\n    });\n\n    console.log('Task updated successfully:', result.data);\n    return result.data;\n  } catch (error) {\n    // טיפול בשגיאות כולל הצגת פרטי השגיאה\n    console.error('Error updating task:', error);\n\n    if (error.response) {\n      // אם יש תשובת שגיאה מהשרת (למשל 500)\n      console.error('Error response:', error.response.data);\n      console.error('Error status:', error.response.status);\n    } else if (error.request) {\n      // אם לא התקבלה תשובה מהשרת\n      console.error('No response received:', error.request);\n    } else {\n      // אם הייתה בעיה כלשהי בהגדרת הבקשה\n      console.error('Error message:', error.message);\n    }\n\n    // זורק את השגיאה כדי שניתן יהיה לתפוס אותה בצד הלקוח\n    throw error; \n  }\n}\n,\nsetCompleted: async (id,name, isComplete) => {\n  try {\n    // שולח רק את השדה 'isComplete' ב-JSON\n    const result = await axios.put(`${apiUrl}/items/${id}`, {\n      Name: name,  // אם לא מעדכנים את ה-Name, שלח ערך ריק\n      IsComplete: isComplete  // עדכון של השדה IsComplete בלבד\n    }, {\n      headers: {\n        'Content-Type': 'application/json'  // חשוב שה-Content-Type יהיה json\n      }\n    });\n\n    console.log('Task updated successfully:', result.data);\n  } catch (error) {\n    console.error('Error updating task:', error);\n\n    if (error.response) {\n      console.error('Error response:', error.response.data);\n      console.error('Error status:', error.response.status);\n    } else if (error.request) {\n      console.error('No response received:', error.request);\n    } else {\n      console.error('Error message:', error.message);\n    }\n  }\n}\n\n// setCompleted: async (id, isComplete, name) => {\n//   try {\n//       const result = await axios.put(`${apiUrl}/items/${id}`, {\n//           name: name,  \n//           isComplete: isComplete\n//       });\n//       console.log('Task updated successfully', result.data);\n//   } catch (error) {\n//       console.error('Error updating task:', error.response ? error.response.data : error.message);\n//   }\n// }\n\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}